services:
  # --------------------------------------------------------------------------
  # AUTH SERVICE
  # --------------------------------------------------------------------------
  auth-service:
    container_name: auth-service
    build: ./auth-service
    ports:
      - "8001:8000"
    env_file:
      - ./.env
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  auth-db:
    container_name: auth-db
    image: postgres:14-alpine
    env_file:
      - ./.env
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --------------------------------------------------------------------------
  # STRIPE WRAPPER SERVICE
  # --------------------------------------------------------------------------
  stripe-service:
    build: ./stripe-service
    ports:
      - "8004:8000"
    env_file:
      - ./.env
    # volumes:
    #   - ./stripe-service:/app
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --------------------------------------------------------------------------
  # TICKET INVENTORY SERVICE (Spring Boot + MySQL)
  # --------------------------------------------------------------------------
  ticket-inventory:
    container_name: ticket-inventory
    build: ./ticket-inventory
    ports:
      - "8005:8080"
    depends_on:
      ticket-inventory-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://ticket-inventory-db:3306/ticket_inventory
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
      SPRINGDOC_API_DOCS_PATH: /api-docs
      SPRINGDOC_SWAGGER_UI_ENABLED: "true"
      SPRINGDOC_API_DOCS_ENABLED: "true"
      SERVER_PORT: 8080
    restart: always
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      start_period: 20s
      interval: 5s
      timeout: 10s
      retries: 7

  ticket-inventory-db:
    container_name: ticket-inventory-db
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ticket_inventory
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - ticket-inventory-data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u$$MYSQL_USER",
          "-p$$MYSQL_PASSWORD",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  # --------------------------------------------------------------------------
  # NOTIFICATION SERVICE
  # --------------------------------------------------------------------------
  notification-service:
    build: ./notification-service
    ports:
      - "8006:8000"
    env_file:
      - ./.env
    environment:
      - TWILIO_ACCOUNT_SID=AC9f7642aae661930ba3e269d802267866
      - TWILIO_AUTH_TOKEN=a9f19bd06b53de084a68e0887bc93f20
      - TWILIO_PHONE_NUMBER=+18066212678
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - RABBITMQ_DEFAULT_USER=rabbitmqusername
      - RABBITMQ_DEFAULT_PASS=rabbitmqpassword
    volumes:
      - ./notification-service:/src
    depends_on:
      - rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # RabbitMQ default communication port
      - "15672:15672" # RabbitMQ Management UI
    env_file:
      - ./.env
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
  # --------------------------------------------------------------------------
  # BOOKING SERVICE
  # --------------------------------------------------------------------------
  booking-service:
    build: ./booking-service
    ports:
      - "8007:8080"
    env_file:
      - ./.env

    volumes:
      - ./booking-service:/src
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/bookings/test"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --------------------------------------------------------------------------
  # PARTY BOOKING SERVICE
  # --------------------------------------------------------------------------
  party-booking-service:
    build: ./party-booking-service
    ports:
      - "8010:8000"
    env_file:
      - ./.env
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --------------------------------------------------------------------------
  # TICKET TRANSFER SERVICE
  # --------------------------------------------------------------------------
  ticket-transfer-service:
    build: ./ticket-transfer-service
    ports:
      - "8011:8000"
    env_file:
      - ./.env
    networks:
      - app_network
    depends_on:
      - stripe-service
      - ticket-inventory
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --------------------------------------------------------------------------
  # EVENT CANCELLATION SERVICE
  # --------------------------------------------------------------------------
  event-cancellation-service:
    container_name: event-cancellation-service
    build: ./event-cancellation-service
    ports:
      - "8008:8000"
    env_file:
      - ./.env

    depends_on:
      auth-service:
        condition: service_healthy
      ticket-inventory:
        condition: service_healthy
      stripe-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always

  # --------------------------------------------------------------------------
  # KONG API GATEWAY
  # --------------------------------------------------------------------------
  kong:
    image: kong:latest
    container_name: kong
    restart: always
    env_file:
      - ./.env
    ports:
      - "8000:8000" # Public Gateway
      - "8002:8001" # Admin API
    volumes:
      - ./kong.yaml:/usr/local/kong/declarative/kong.yaml
    networks:
      - app_network
    depends_on:
      - auth-service
      - booking-service
      - notification-service
      - party-booking-service
      - stripe-service
      - ticket-inventory
      - ticket-transfer-service

  # # --------------------------------------------------------------------------
  # # FRONTEND APPLICATION
  # # --------------------------------------------------------------------------
  # frontend:
  #   container_name: eventgo-frontend
  #   build:
  #     context: ../eventgo-frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ../eventgo-frontend:/app
  #     - /app/node_modules
  #   networks:
  #     - app_network
  #   healthcheck:
  #     test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: always
  #   environment:
  #     - NODE_ENV=development
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000
  #   depends_on:
  #     - kong

volumes:
  auth-db-data:
  ticket-inventory-data:

networks:
  app_network:
    driver: bridge
